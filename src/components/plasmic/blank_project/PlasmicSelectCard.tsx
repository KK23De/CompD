// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2xsWMbGxJMd5f6YcntvxRn
// Component: Dm5PcuUjjAz
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 2xsWMbGxJMd5f6YcntvxRn/projectcss
import sty from "./PlasmicSelectCard.module.css"; // plasmic-import: Dm5PcuUjjAz/css

export type PlasmicSelectCard__VariantMembers = {};
export type PlasmicSelectCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelectCard__VariantsArgs;
export const PlasmicSelectCard__VariantProps = new Array<VariantPropType>();

export type PlasmicSelectCard__ArgsType = {};
type ArgPropType = keyof PlasmicSelectCard__ArgsType;
export const PlasmicSelectCard__ArgProps = new Array<ArgPropType>();

export type PlasmicSelectCard__OverridesType = {
  group14?: p.Flex<"div">;
  box?: p.Flex<"div">;
  caption?: p.Flex<"div">;
  selectAtLeast4GoalsToContinue?: p.Flex<"div">;
  group13?: p.Flex<"div">;
  rectangle3?: p.Flex<"a">;
  goals?: p.Flex<"div">;
  goal?: p.Flex<"div">;
  rectangle2?: p.Flex<"div">;
  goal2?: p.Flex<"div">;
  rectangle4?: p.Flex<"div">;
  goal3?: p.Flex<"div">;
  rectangle5?: p.Flex<"div">;
  goal4?: p.Flex<"div">;
  rectangle6?: p.Flex<"div">;
  goal5?: p.Flex<"div">;
  rectangle7?: p.Flex<"div">;
  goal6?: p.Flex<"div">;
  rectangle8?: p.Flex<"div">;
  goal7?: p.Flex<"div">;
  rectangle9?: p.Flex<"div">;
};

export interface DefaultSelectCardProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSelectCard__RenderFunc(props: {
  variants: PlasmicSelectCard__VariantsArgs;
  args: PlasmicSelectCard__ArgsType;
  overrides: PlasmicSelectCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"group14"}
      data-plasmic-override={overrides.group14}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.group14
      )}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(projectcss.all, sty.box)}
      />

      <div
        data-plasmic-name={"caption"}
        data-plasmic-override={overrides.caption}
        className={classNames(projectcss.all, sty.caption)}
      >
        <div
          data-plasmic-name={"selectAtLeast4GoalsToContinue"}
          data-plasmic-override={overrides.selectAtLeast4GoalsToContinue}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.selectAtLeast4GoalsToContinue
          )}
        >
          {"select at least 4 goals to continue "}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pRGga
          )}
        >
          {"Select Goals"}
        </div>
      </div>

      <div
        data-plasmic-name={"group13"}
        data-plasmic-override={overrides.group13}
        className={classNames(projectcss.all, sty.group13)}
      >
        <a
          data-plasmic-name={"rectangle3"}
          data-plasmic-override={overrides.rectangle3}
          className={classNames(projectcss.all, projectcss.a, sty.rectangle3)}
          href={`/thanks`}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kdIvm
          )}
        >
          {"Submit"}
        </div>
      </div>

      <div
        data-plasmic-name={"goals"}
        data-plasmic-override={overrides.goals}
        className={classNames(projectcss.all, sty.goals)}
      >
        <div
          data-plasmic-name={"goal"}
          data-plasmic-override={overrides.goal}
          className={classNames(projectcss.all, sty.goal)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kyv18
            )}
          >
            {"Process Automation"}
          </div>

          <div
            data-plasmic-name={"rectangle2"}
            data-plasmic-override={overrides.rectangle2}
            className={classNames(projectcss.all, sty.rectangle2)}
          />
        </div>

        <div
          data-plasmic-name={"goal2"}
          data-plasmic-override={overrides.goal2}
          className={classNames(projectcss.all, sty.goal2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___573Ja
            )}
          >
            {"Product Optimization"}
          </div>

          <div
            data-plasmic-name={"rectangle4"}
            data-plasmic-override={overrides.rectangle4}
            className={classNames(projectcss.all, sty.rectangle4)}
          />
        </div>

        <div
          data-plasmic-name={"goal3"}
          data-plasmic-override={overrides.goal3}
          className={classNames(projectcss.all, sty.goal3)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dZf
            )}
          >
            {"Project Management"}
          </div>

          <div
            data-plasmic-name={"rectangle5"}
            data-plasmic-override={overrides.rectangle5}
            className={classNames(projectcss.all, sty.rectangle5)}
          />
        </div>

        <div
          data-plasmic-name={"goal4"}
          data-plasmic-override={overrides.goal4}
          className={classNames(projectcss.all, sty.goal4)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__o72Sn
            )}
          >
            {"OKR"}
          </div>

          <div
            data-plasmic-name={"rectangle6"}
            data-plasmic-override={overrides.rectangle6}
            className={classNames(projectcss.all, sty.rectangle6)}
          />
        </div>

        <div
          data-plasmic-name={"goal5"}
          data-plasmic-override={overrides.goal5}
          className={classNames(projectcss.all, sty.goal5)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ocTf
            )}
          >
            {"Marketing Automation"}
          </div>

          <div
            data-plasmic-name={"rectangle7"}
            data-plasmic-override={overrides.rectangle7}
            className={classNames(projectcss.all, sty.rectangle7)}
          />
        </div>

        <div
          data-plasmic-name={"goal6"}
          data-plasmic-override={overrides.goal6}
          className={classNames(projectcss.all, sty.goal6)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6VaQt
            )}
          >
            {"Product Documentation"}
          </div>

          <div
            data-plasmic-name={"rectangle8"}
            data-plasmic-override={overrides.rectangle8}
            className={classNames(projectcss.all, sty.rectangle8)}
          />
        </div>

        <div
          data-plasmic-name={"goal7"}
          data-plasmic-override={overrides.goal7}
          className={classNames(projectcss.all, sty.goal7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qMzyQ
            )}
          >
            {"Product Betterment"}
          </div>

          <div
            data-plasmic-name={"rectangle9"}
            data-plasmic-override={overrides.rectangle9}
            className={classNames(projectcss.all, sty.rectangle9)}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  group14: [
    "group14",
    "box",
    "caption",
    "selectAtLeast4GoalsToContinue",
    "group13",
    "rectangle3",
    "goals",
    "goal",
    "rectangle2",
    "goal2",
    "rectangle4",
    "goal3",
    "rectangle5",
    "goal4",
    "rectangle6",
    "goal5",
    "rectangle7",
    "goal6",
    "rectangle8",
    "goal7",
    "rectangle9"
  ],
  box: ["box"],
  caption: ["caption", "selectAtLeast4GoalsToContinue"],
  selectAtLeast4GoalsToContinue: ["selectAtLeast4GoalsToContinue"],
  group13: ["group13", "rectangle3"],
  rectangle3: ["rectangle3"],
  goals: [
    "goals",
    "goal",
    "rectangle2",
    "goal2",
    "rectangle4",
    "goal3",
    "rectangle5",
    "goal4",
    "rectangle6",
    "goal5",
    "rectangle7",
    "goal6",
    "rectangle8",
    "goal7",
    "rectangle9"
  ],
  goal: ["goal", "rectangle2"],
  rectangle2: ["rectangle2"],
  goal2: ["goal2", "rectangle4"],
  rectangle4: ["rectangle4"],
  goal3: ["goal3", "rectangle5"],
  rectangle5: ["rectangle5"],
  goal4: ["goal4", "rectangle6"],
  rectangle6: ["rectangle6"],
  goal5: ["goal5", "rectangle7"],
  rectangle7: ["rectangle7"],
  goal6: ["goal6", "rectangle8"],
  rectangle8: ["rectangle8"],
  goal7: ["goal7", "rectangle9"],
  rectangle9: ["rectangle9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  group14: "div";
  box: "div";
  caption: "div";
  selectAtLeast4GoalsToContinue: "div";
  group13: "div";
  rectangle3: "a";
  goals: "div";
  goal: "div";
  rectangle2: "div";
  goal2: "div";
  rectangle4: "div";
  goal3: "div";
  rectangle5: "div";
  goal4: "div";
  rectangle6: "div";
  goal5: "div";
  rectangle7: "div";
  goal6: "div";
  rectangle8: "div";
  goal7: "div";
  rectangle9: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectCard__VariantsArgs;
    args?: PlasmicSelectCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelectCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelectCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSelectCard__ArgProps,
          internalVariantPropNames: PlasmicSelectCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSelectCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "group14") {
    func.displayName = "PlasmicSelectCard";
  } else {
    func.displayName = `PlasmicSelectCard.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectCard = Object.assign(
  // Top-level PlasmicSelectCard renders the root element
  makeNodeComponent("group14"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    caption: makeNodeComponent("caption"),
    selectAtLeast4GoalsToContinue: makeNodeComponent(
      "selectAtLeast4GoalsToContinue"
    ),
    group13: makeNodeComponent("group13"),
    rectangle3: makeNodeComponent("rectangle3"),
    goals: makeNodeComponent("goals"),
    goal: makeNodeComponent("goal"),
    rectangle2: makeNodeComponent("rectangle2"),
    goal2: makeNodeComponent("goal2"),
    rectangle4: makeNodeComponent("rectangle4"),
    goal3: makeNodeComponent("goal3"),
    rectangle5: makeNodeComponent("rectangle5"),
    goal4: makeNodeComponent("goal4"),
    rectangle6: makeNodeComponent("rectangle6"),
    goal5: makeNodeComponent("goal5"),
    rectangle7: makeNodeComponent("rectangle7"),
    goal6: makeNodeComponent("goal6"),
    rectangle8: makeNodeComponent("rectangle8"),
    goal7: makeNodeComponent("goal7"),
    rectangle9: makeNodeComponent("rectangle9"),

    // Metadata about props expected for PlasmicSelectCard
    internalVariantProps: PlasmicSelectCard__VariantProps,
    internalArgProps: PlasmicSelectCard__ArgProps
  }
);

export default PlasmicSelectCard;
/* prettier-ignore-end */
